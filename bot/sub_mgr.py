# sub_mgr.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.error import TelegramError
from datetime import datetime
import logging
from typing import Dict, Any, Optional, List
from html import escape
from .sub_db import SubscriptionDB, DatabaseError
from .payment_system import PaymentSystem
from .subscription_config import (
    SubscriptionTier, 
    SUBSCRIPTION_DESCRIPTIONS, 
    PREMIUM_FEATURES, 
    FREE_LIMITS, 
    TRIAL_USER_LIMIT, 
    SUBSCRIPTION_PRICES_V1, 
    SUBSCRIPTION_PRICES_V2,
    ConversationStates
)

logger = logging.getLogger(__name__)

class SubscriptionError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏"""
    pass

class SubscriptionManager:
    def __init__(self, db: SubscriptionDB, payment_system: PaymentSystem):
        self.db = db
        self.payment_system = payment_system

    def _parse_date(self, date_str: Optional[str]) -> Optional[datetime]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –∏–∑ SQLite –≤ datetime
        """
        if not date_str:
            return None
        try:
            # –ï—Å–ª–∏ date_str —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º datetime, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if isinstance(date_str, datetime):
                return date_str
            # –ò–Ω–∞—á–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime
            return datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S')
        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}", exc_info=True)
            return None

    def _format_date(self, dt: datetime) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            dt: –û–±—ä–µ–∫—Ç datetime
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
        """
        return dt.strftime('%d.%m.%Y %H:%M')
    async def handle_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ"""
        try:
            user_id = update.effective_user.id
            subscription_info = self.db.get_user_subscription(user_id)

            if not subscription_info:
                await update.message.reply_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."
                )
                return

            status_message = self._format_subscription_info(subscription_info)
            usage_info = self._get_feature_usage_info(user_id)
            final_message = f"{status_message}\n\n{usage_info}"
            
            keyboard = self._get_profile_keyboard(subscription_info)
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                final_message, 
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

        except DatabaseError as e:
            logger.error(f"Database error in handle_profile: {e}", exc_info=True)
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as e:
            logger.error(f"Unexpected error in handle_profile: {e}", exc_info=True)
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    async def handle_subscription(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            user_id = update.effective_user.id
            subscription_info = self.db.get_user_subscription(user_id)

            if not subscription_info:
                keyboard = [[InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_plans")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
            
                await update.message.reply_text(
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.",
                    reply_markup=reply_markup
                )
                return

            is_trial = subscription_info['is_trial']
            status = subscription_info['status']
            level = subscription_info['subscription_level']
        
            if is_trial:
                days_left = subscription_info.get('days_left', 0)
                message = (
                    "üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b>\n\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_left}</b>\n"
                    "–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n"
                    "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ:\n"
                )
                for feature, details in PREMIUM_FEATURES.items():
                    if details.is_standard:  # –í –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                        message += f"‚úÖ {escape(details.description)}\n"
                    else:
                        message += f"‚ùå {escape(details.description)} (—Ç—Ä–µ–±—É–µ—Ç—Å—è Premium)\n"
            else:
                end_date = subscription_info.get('end_date')
                formatted_date = self._format_date(end_date) if end_date else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
                if status == 'active':
                    message = (
                        f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ {escape(level.capitalize())}</b>\n\n"
                        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{formatted_date}</b>\n\n"
                        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                    )
                    for feature, details in PREMIUM_FEATURES.items():
                        if (details.is_premium and level == 'premium') or \
                            (details.is_standard and level in ['standard', 'premium']):
                            message += f"‚úÖ {escape(details.description)}\n"
                        else:
                            message += f"‚ùå {escape(details.description)}\n"
                else:
                    message = (
                        "‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞</b>\n\n"
                        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                    )
                    for feature, limit in FREE_LIMITS.items():
                        usage = self.db.get_daily_feature_usage(user_id, feature)
                        message += f"‚Ä¢ {escape(feature)}: {usage}/{limit} —Ä–∞–∑ –≤ –¥–µ–Ω—å\n"

            keyboard = []
            if is_trial:
                keyboard.append([InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_plans")])
            elif status != 'active':
                keyboard.append([InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_plans")])
            else:
                keyboard.append([InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="show_plans")])
        
            reply_markup = InlineKeyboardMarkup(keyboard)
        
            await update.message.reply_text(
                message,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"Error in handle_subscription: {e}", exc_info=True)
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
                
    async def handle_manage(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /manage - –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        try:
            user_id = update.effective_user.id
            
            if not self.db.get_user_subscription(user_id):
                success, _ = self.db.initialize_user(user_id)
                if not success:
                    raise DatabaseError("Failed to initialize user")

            total_users = self.db.get_total_users_count()
            prices = SUBSCRIPTION_PRICES_V1 if total_users <= TRIAL_USER_LIMIT else SUBSCRIPTION_PRICES_V2

            keyboard = [
                [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="tier_standard")],
                [InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="tier_premium")],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            message = (
                "üîÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:\n\n"
                "<b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n"
                f"<i>{escape(SUBSCRIPTION_DESCRIPTIONS['standard'])}</i>\n"
                f"–û—Ç {min(prices['standard'].values())} —Ä—É–±/–º–µ—Å\n\n"
                "<b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b>\n"
                f"<i>{escape(SUBSCRIPTION_DESCRIPTIONS['premium'])}</i>\n"
                f"–û—Ç {min(prices['premium'].values())} —Ä—É–±/–º–µ—Å"
            )

            await update.message.reply_text(
                message,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return ConversationStates.CHOOSING_TIER.value

        except DatabaseError as e:
            logger.error(f"Database error in handle_manage: {e}", exc_info=True)
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"Unexpected error in handle_manage: {e}", exc_info=True)
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END
        
    async def handle_tier_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        try:
            query = update.callback_query
            await query.answer()
            
            if query.data == "cancel":
                await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return ConversationHandler.END
            
            chosen_tier = query.data.split('_')[1]
            context.user_data['chosen_tier'] = chosen_tier

            total_users = self.db.get_total_users_count()
            prices = SUBSCRIPTION_PRICES_V1 if total_users <= TRIAL_USER_LIMIT else SUBSCRIPTION_PRICES_V2

            keyboard = []
            for duration in sorted(prices[chosen_tier].keys()):
                keyboard.append([InlineKeyboardButton(
                    f"{duration} –º–µ—Å. - {prices[chosen_tier][duration]} —Ä—É–±.",
                    callback_data=f"duration_{duration}"
                )])
            keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                current_text = query.message.text_html if query.message else ""
                message = (
                    f"üéØ –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: <b>{escape(chosen_tier.capitalize())}</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:"
                )
                
                if message.strip() != current_text.strip():
                    try:
                        await query.edit_message_text(
                            text=message,
                            reply_markup=reply_markup,
                            parse_mode='HTML'
                        )
                    except TelegramError as e:
                        if "Bad Request" in str(e):
                            await query.message.reply_text(
                                text=message,
                                reply_markup=reply_markup,
                                parse_mode='HTML'
                            )
                
            except TelegramError as e:
                if "message is not modified" not in str(e).lower():
                    raise
                
            return ConversationStates.CHOOSING_DURATION.value

        except Exception as e:
            logger.error(f"Error in handle_tier_choice: {e}", exc_info=True)
            if update.callback_query:
                await update.callback_query.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            return ConversationHandler.END
        
    async def handle_duration_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            query = update.callback_query
            await query.answer()

            if query.data == "cancel":
                await query.edit_message_text("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                return ConversationHandler.END

            user_id = update.effective_user.id
            duration = int(query.data.split('_')[1])
            tier = context.user_data.get('chosen_tier')
            
            if not tier:
                await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
                return ConversationHandler.END

            total_users = self.db.get_total_users_count()
            prices = SUBSCRIPTION_PRICES_V1 if total_users <= TRIAL_USER_LIMIT else SUBSCRIPTION_PRICES_V2
            amount = prices[tier][duration]

            description = f"–ü–æ–¥–ø–∏—Å–∫–∞ {tier.capitalize()} –Ω–∞ {duration} –º–µ—Å."
            
            try:
                payment_info = self.payment_system.create_payment(
                    amount=amount,
                    description=description,
                    user_id=user_id,
                    subscription_type=tier,
                    duration=duration,
                    return_url=f"https://t.me/ShefRecept_bot?start=payment_{user_id}"
                )
            
                if not payment_info or not self.db.add_payment_record(user_id, payment_info):
                    raise DatabaseError("Failed to add payment record")
                
                keyboard = [
                    [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_info['confirmation_url'])],
                    [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
                    [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                    f"–¢–∞—Ä–∏—Ñ: <b>{escape(tier.capitalize())}</b>\n"
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{duration} –º–µ—Å.</b>\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{amount} —Ä—É–±.</b>\n\n"
                    f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n"
                    f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
                
                context.user_data.update({
                    'payment_id': payment_info['payment_id'],
                    'duration': str(duration),
                    'tier': tier
                })
                return ConversationStates.CHECKING_PAYMENT.value

            except Exception as e:
                logger.error(f"Payment creation error: {e}", exc_info=True)
                await query.edit_message_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return ConversationHandler.END

        except Exception as e:
            logger.error(f"Duration choice error: {e}", exc_info=True)
            if update.callback_query:
                await update.callback_query.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            return ConversationHandler.END
    async def check_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
        try:
            query = update.callback_query
            if query:
                await query.answer()

            payment_id = context.user_data.get('payment_id')
            if not payment_id:
                message = "‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–Ω–æ–≤–æ."
                if query:
                    try:
                        await query.edit_message_text(
                            message,
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="show_plans")
                            ]])
                        )
                    except TelegramError as e:
                        if "message is not modified" not in str(e).lower():
                            raise
                else:
                    await update.message.reply_text(message)
                return ConversationHandler.END

            payment_status = self.payment_system.check_payment_status(payment_id)
        
            if payment_status['status'] == 'succeeded':
                user_id = update.effective_user.id
                tier = context.user_data.get('tier')
                duration = int(context.user_data.get('duration', 0))
            
                if not all([tier, duration]):
                    raise ValueError("Missing subscription details")

                if self.db.update_subscription(user_id, tier, duration):
                    subscription_info = self.db.get_user_subscription(user_id)
                    end_date = self._parse_date(subscription_info['end_date'])
                    formatted_date = self._format_date(end_date) if end_date else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                
                    success_message = (
                        f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
                        f"–¢–∞—Ä–∏—Ñ: <b>{escape(tier.capitalize())}</b>\n"
                        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{duration} –º–µ—Å.</b>\n"
                        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{escape(formatted_date)}</b>\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"
                    )
                    if query:
                        await query.edit_message_text(success_message, parse_mode='HTML')
                    else:
                        await update.message.reply_text(success_message, parse_mode='HTML')
                    return ConversationHandler.END
                else:
                    raise DatabaseError("Failed to update subscription")
            else:
                wait_message = (
                    "‚è≥ –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É."
                )
                keyboard = [
                    [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_payment")],
                    [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
            
                if query:
                    try:
                        await query.edit_message_text(
                            wait_message,
                            reply_markup=reply_markup
                        )
                    except TelegramError as e:
                        if "message is not modified" not in str(e).lower():
                            raise
                else:
                    await update.message.reply_text(
                        wait_message,
                        reply_markup=reply_markup
                    )
                return ConversationStates.CHECKING_PAYMENT.value

        except Exception as e:
            logger.error(f"Payment check error: {e}", exc_info=True)
            error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            if update.callback_query:
                await update.callback_query.message.reply_text(error_message)
            else:
                await update.message.reply_text(error_message)
            return ConversationHandler.END
    def _format_subscription_info(self, subscription_info: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
        """
        if not subscription_info:
            return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        status = subscription_info['status']
        level = subscription_info['subscription_level']
        is_trial = subscription_info.get('is_trial', 0)
    
        if is_trial:
            status_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
        else:
            status_text = {
                'active': '–ê–∫—Ç–∏–≤–Ω–∞—è',
                'trial': '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
                'expired': '–ò—Å—Ç–µ–∫–ª–∞',
                'free': '–ë–∞–∑–æ–≤–∞—è'
            }.get(status, status)

        end_date = self._parse_date(subscription_info.get('end_date'))
        if end_date:
            days_left = (end_date - datetime.now()).days
            if days_left > 0:
                date_text = f"{self._format_date(end_date)} (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π)"
            else:
                date_text = "–ò—Å—Ç–µ–∫–ª–∞"
        else:
            date_text = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        message = (
            f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{escape(status_text)}</b>\n"
        )

        if is_trial:
            message += (
                f"–£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 14 –¥–Ω–µ–π\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{date_text}</b>\n\n"
                "–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
                "–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."
            )
        else:
            message += (
                f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏: <b>{escape(level.capitalize())}</b>\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{date_text}</b>\n"
            )

        return message
    
    def _get_feature_usage_info(self, user_id: int) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = "üìà <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
        
        try:
            for feature, limit in FREE_LIMITS.items():
                usage = self.db.get_daily_feature_usage(user_id, feature)
                status = '‚úÖ' if usage < limit else '‚ùå'
                message += f"{status} {escape(feature)}: <b>{usage}/{limit}</b>\n"
                
        except DatabaseError as e:
            logger.error(f"Error getting feature usage: {e}", exc_info=True)
            message += "<i>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</i>\n"
            
        return message

    def _get_profile_keyboard(self, subscription_info: Dict[str, Any]) -> List[List[InlineKeyboardButton]]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        
        Args:
            subscription_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
            
        Returns:
            List[List[InlineKeyboardButton]]: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        keyboard = []
        
        status = subscription_info.get('status')
        if status == 'active':
            end_date = self._parse_date(subscription_info.get('end_date'))
            if end_date and (end_date - datetime.now()).days <= 7:
                keyboard.append([
                    InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_plans")
                ])
        elif status in ['expired', 'free', 'trial']:
            keyboard.append([
                InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_plans")
            ])
        
        if subscription_info.get('payment_id'):
            keyboard.append([
                InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="check_payment")
            ])
            
        return keyboard

    async def check_access(self, user_id: int, feature: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            feature: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
        """
        try:
            subscription_info = self.db.get_user_subscription(user_id)
            if not subscription_info:
                return False
                
            feature_info = PREMIUM_FEATURES.get(feature)
            if not feature_info:
                logger.warning(f"Unknown feature requested: {feature}")
                return False
                
            subscription_level = subscription_info['subscription_level']
            subscription_status = subscription_info['status']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
            if subscription_status not in ['active', 'trial']:
                return False

            # –î–ª—è –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π
            if feature_info.is_premium:
                return subscription_level == 'premium'
                
            # –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            if feature_info.is_standard:
                return subscription_level in ['standard', 'premium']
                
            # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            daily_limit = FREE_LIMITS.get(feature, 0)
            if not daily_limit:
                return False
                
            daily_usage = self.db.get_daily_feature_usage(user_id, feature)
            return daily_usage < daily_limit
            
        except DatabaseError as e:
            logger.error(f"Database error in check_access: {e}", exc_info=True)
            return False
        except Exception as e:
            logger.error(f"Unexpected error in check_access: {e}", exc_info=True)
            return False
    