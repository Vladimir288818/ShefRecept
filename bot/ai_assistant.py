import os
import logging
from openai import AsyncOpenAI
from telegram.ext import CommandHandler, MessageHandler, filters
from typing import Optional

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AIAssistantError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    pass

class AIAssistant:
    def __init__(self, api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        
        Args:
            api_key (Optional[str]): API –∫–ª—é—á OpenAI. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        """
        self.api_key = api_key or os.getenv("OPENAI_API_KEY")
        if not self.api_key:
            raise AIAssistantError("OpenAI API key not found")
        
        self.client = AsyncOpenAI(api_key=self.api_key)
        logger.info("AI Assistant initialized successfully")

    async def get_advice_response(self, prompt: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞ –ø–æ –≤—ã–±–æ—Ä—É –±–ª—é–¥
   
        Args:
            prompt: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       
        Returns:
            Optional[str]: –û—Ç–≤–µ—Ç AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            system_prompt = """–¢—ã –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫ –∏ –¥–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç—ã! 
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–ª—é–¥ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–µ–≥–∞–Ω—Å–∫–æ–µ, –¥–∏–µ—Ç–∏—á–µ—Å–∫–æ–µ, –º—è—Å–Ω–æ–µ). 
            –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –Ω–∞ –≤—ã–±–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏, 
            –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è. –î–ª—è –æ–±–µ–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—É–ø–æ–≤, 
            –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–ª—é–¥ —Å –≥–∞—Ä–Ω–∏—Ä–æ–º –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤. –í–∫–ª—é—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞.
            –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤—å —Ñ—Ä–∞–∑—É: '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å 
            –∫–æ–º–∞–Ω–¥–∞–º–∏ /recipes –∏–ª–∏ /ai_recipes.'"""

            completion = await self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=1000,
                temperature=0.7
            )
       
            response = completion.choices[0].message.content
            logger.info("Successfully generated advice response")
            return response
       
        except Exception as e:
            logger.error(f"Error generating advice: {e}")
            return None

    async def handle_categories(self, update, context):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        message = """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–≤–µ—Ç–æ–≤: 
        üåÖ –ó–∞–≤—Ç—Ä–∞–∫
        üåû –û–±–µ–¥
        üåô –£–∂–∏–Ω
        
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        ‚Ä¢ –≤–µ–≥–∞–Ω—Å–∫–æ–µ
        ‚Ä¢ –¥–∏–µ—Ç–∏—á–µ—Å–∫–æ–µ
        ‚Ä¢ –º—è—Å–Ω–æ–µ –º–µ–Ω—é
        """
        await update.message.reply_text(message)
        logger.info("Sent categories information")

    async def handle_text(self, update, context):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤
        """
        user_message = update.message.text
        prompt = f"–ü–æ–¥–±–µ—Ä–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –±–ª—é–¥ –¥–ª—è '{user_message}'."
        
        response = await self.get_advice_response(prompt)
        
        if not response:
            error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            await update.message.reply_text(error_message)
            logger.warning(f"Failed to generate response for prompt: {prompt}")
            return

        await update.message.reply_text(response)
        logger.info(f"Successfully processed user message: {user_message}")

def init_ai_assistant(application):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-—Å–æ–≤–µ—Ç–Ω–∏–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    
    Args:
        application: Telegram application instance
    """
    try:
        ai_assistant = AIAssistant()
        application.add_handler(CommandHandler("categories", ai_assistant.handle_categories))
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            ai_assistant.handle_text
        ))
        logger.info("AI Assistant module initialized successfully")
    except Exception as e:
        logger.error(f"Failed to initialize AI Assistant: {e}")
        raise AIAssistantError(f"AI Assistant initialization failed: {e}")